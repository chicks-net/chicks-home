#!/usr/bin/env python3
"""tim - like time(1) but with Slack notification"""

# based on code from https://gist.github.com/quiver/4134221 (thanks!)
# vim: set fileencoding=utf8

# TODO: capture output
# TODO: send to Slack

import argparse
import logging
import logging.handlers
import os
import platform
import pkg_resources
import sys
import time

def configure_logging():
    logger = logging.getLogger('tim')
    logger.setLevel(logging.DEBUG)

    # try to include Slack logging
    installed = {pkg.key for pkg in pkg_resources.working_set}
    slack_handler = None
    if not "slack-log-handler" in installed:
        print("No Slack for you")
    else:
        from slack_log_handler import SlackLogHandler

        # Create slack handler
        slack_token = os.getenv("SLACK_TOKEN")
        #slack_channel = os.getenv("SLACK_CHANNEL")

        if slack_token is None:
            print("Please define SLACK_TOKEN in your environment.")
        else:
            slack_handler = SlackLogHandler(slack_token)

            # LOG MESSAGE FORMATTER
            slack_formatter = logging.Formatter('%(name)s - %(levelname)s - `%(message)s`')
            slack_handler.setFormatter(slack_formatter)

            # Define the minimum level of log messages you want to send to Slack
            slack_handler.setLevel(logging.DEBUG)

    # create syslog handler
    syslog_address = "/dev/log"
    if platform.system() == "Darwin":
        syslog_address="/var/run/syslog"
    sl = logging.handlers.SysLogHandler(address=syslog_address)

    # create console handler with a lower log level
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)

    # create formatter and add it to the handlers
    ch_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(module)s.%(funcName)s - %(message)s')
    ch.setFormatter(ch_formatter)

    sl_formatter = logging.Formatter('%(name)s[]: %(module)s.%(funcName)s - %(message)s')
    sl.setFormatter(sl_formatter)

    # add the handlers to the logger
    logger.addHandler(ch)
    logger.addHandler(sl)
    if not slack_handler is None:
        logger.addHandler(slack_handler)

    return logger

# thanks to https://stackoverflow.com/a/775075/2002471
def hms(seconds):
    m, s = divmod(seconds, 60)
    h, m = divmod(m, 60)
    return(h,m,s)

def fmt_hms(seconds):
    (h,m,s) = hms(seconds)

    output = ''

    if h:
        output += "%dh" % (h)
    if m:
        output += "%dm" % (m)

    output += "%06.3fs" % (s)
    return(output)

def main():
    # parse command line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('command', metavar='C',
                        nargs='+', help='command to time')
    args = parser.parse_args()

    log = configure_logging()
    start  = time.time()

    pgid = os.getpgrp()
    pid = os.fork()
    if pid < 0:
        sys.exit(-1)
    elif pid == 0: # child
        log.info('forked PID %d for %s' % (os.getpid(), " ".join(args.command)))
        executable = args.command[0]
        os.execvp(executable,args.command)
    else: # parent
        os.setpgid(pid, pgid)

    options = os.WUNTRACED | os.WCONTINUED
    while True:
        try:
            pid, status, resource = os.wait3(options) # reap any child process
            log.debug("%s %s" % (pid, resource))
            end = time.time()
            duration = end - start

            # see https://docs.python.org/3/library/resource.html#resource-usage for magic numbers
            log.info("real   %s" % (fmt_hms(duration)))
            log.info("user   %s" % (fmt_hms(resource[0])))
            log.info("system %s" % (fmt_hms(resource[1])))
            log.info("maxrss %d" % (resource[2]))
            log.info("minflt %d" % (resource[6]))
            log.info("maxflt %d" % (resource[7]))

            how = ""
            if status == -1:
                sys.stderr('waitpid')
                sys.exit(1)
            elif os.WIFEXITED(status):
                how = 'WIFEXITED'
            elif os.WIFSTOPPED(status):
                how = 'WIFSTOPPED'
            elif os.WIFCONTINUED(status):
                how = 'WIFCONTINUED'

            log.info("status %i, %s" % (status, how))
        except OSError:
            # [Errno 10] No child processes
            break
#        except err:
#            break

if __name__ == '__main__':
    main()
