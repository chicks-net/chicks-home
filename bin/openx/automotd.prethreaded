#!/usr/local/bin/perl 

# this script will query the mcp and build nagios config files

use OX::Std;
use OX::MCP::DB;
use OX::MCP::CmdLine;
use OX::Net::ONE;
use OX::Config options => {
	'datacenter|dc=s@' => [ 'OX abbreviation for data center', [] ],
};

use File::Copy;
use Data::Dumper;

sub program_description { 
  "Display host info and generate motd files"
}

# config
my $debug     = 1 if $ENV{USER} eq 'chicks';
OX::Config->read;		# read config
my $db = OX::MCP::DB->connect;	# get database handle
my $dbh = DBI->connect('DBI:mysql:chicks','root','J04xl*4e!h') or die "couldn't connect: " . $DBI::errstr;

# setup data centers to build
my (%showdc, $dcs);
if (Config->datacenter) {
	$dcs = Config->datacenter;
}

unless (@$dcs) {
	$dcs = [qw(ee ez xv xa)];
}

foreach my $dc (@$dcs) {
	$showdc{$dc} = 1;
}

# get etherswitch data
#my ( $switches, $rack_switches, $dc_switches ) = getswitches();

my $datacenters = {
	# Amazon EC2 Dublin
	'ez' => {
		region => 'eu-west-1',
		ourvms => 0,
	},
	# Equinix Virginia
	'xv' => {
		region => 'xv',
		ourvms => 1,
	},
	# Equinix Amsterdam
	'xa' => {
		region => 'xa',
		ourvms => 1,
	},
};

foreach my $dc (@$dcs) {
	my (@hosts_array,@groups,%roles);
	unless (defined $datacenters->{$dc}) {
		warn "datacenter $dc not configured, skipping";
		next;
	}
	my $region = $datacenters->{$dc}->{region};

	# virtual hosts
	my ($vm_hosts,$host_vms);
	if ($datacenters->{$dc}->{ourvms}) {
		($vm_hosts,$host_vms) = get_vm_hosts($dc);
	}

	# get virtuals
	push(@hosts_array,"#\n","# Virtual Machines\n","#\n");
	my $rs = $db->resultset( 'VirtualMachine' );

	$rs = $rs->running_instances->search( 
		{
			'role.name' => { IN => ['nagios'] },
			'region' => $region,
			'internal_ip' => { '!=', undef },
		},
		{
			order_by => 'fqdn',
			'join' => { 'virtual_machine_roles' => 'role' },
		}
	);

	while( my $row = $rs->next ) {
		my $hostname = $row->fqdn;
		my $ip = $row->internal_ip;
		my $alias = $hostname;
		$alias =~ s/\.e[eswz]1[abcd].*//;
		$alias =~ s/\.(xa|xv|ew|ed)$//;

		my @rolenames = get_roles($row);

		my $parent = $vm_hosts->{$alias};
		warn "no parent for $hostname" if ($dc =~ /^x[av]$/ and ! defined $parent);

		my $entity = $db->resultset( 'VirtualMachine' )
			->by_name( $hostname )
			->related_resultset( 'virtual_machine_comments' )
			->related_resultset( 'comment' );
		my $comments = print_comments($entity);

		my $host = {
			hostname => $hostname,
			alias => $alias,
			ip  => $ip,
			parent => $parent,
			roles => \@rolenames,
			comments => $comments,
		};

		process_host($host);
	}

	# get physicals
	push(@hosts_array,"#\n","# Physical Machines\n","#\n");
	my $prs = $db->resultset( 'PhysicalMachine' );

	$prs = $prs->in_cluster($region)->search( 
		{
			'role.name' => { IN => ['nagios'] },
			# state is not currently maintained, so searching for it is counterproductive
			#'state' => 'RUNNING',
		},
		{
			order_by => 'hostname',
			'join' => { 'physical_machine_roles' => 'role' },
		}
	);

	while( my $row = $prs->next ) {
		my $hostname = $row->hostname;
		my $ip = $row->ip;
		my $ipmi = $row->ipmi;
		my $purpose = $row->purpose || 'unknown';
		my $alias = $hostname . '.' . $region;

		my @rolenames = get_roles($row);

		my $ipmi_web = "http://$ipmi/";

		my $entity = $db->resultset( 'PhysicalMachine' )
			->by_name( $hostname )
			->related_resultset( 'physical_machine_comments' )
			->related_resultset( 'comment' );
		my $comments = print_comments($entity);

		my $host = {
			hostname => $hostname,
			alias => $alias,
			ip  => $ip,
			purpose => $purpose,
			roles => \@rolenames,
			ipmi_web=> $ipmi_web,
			comments => $comments,
		};
		if ( defined $host_vms->{$hostname}  ) {
			$host->{vms} = $host_vms->{$hostname};
		}
		process_host($host);
	}

} # foreach my $dc

# cleanup
exit(0);

# subs
sub write_file {
	my ($hostsfile,@array) = @_;
	open( FH, ">$hostsfile" );
	print FH @array;
	close(FH);
}

sub process_host {
	my ($host) = @_;
	my $hostname = $host->{hostname};
	my $copy = 0;

	my $motd = print_host($host);

	my $sql = "select * from motd where hostname = " . $dbh->quote($hostname);
	my $sth = $dbh->prepare($sql) or die "bad prepare('$sql'): " . $DBI::errstr;
	$sth->execute() or die "bad execute: " . $DBI::errstr;

	my $rows = $sth->rows;

	if ($rows == 0) {
		# new, insert it
		my $sql = "insert into motd values(" . $dbh->quote($hostname) . ",0," . $dbh->quote($motd) . ")";
		$dbh->do($sql);
		$copy = 1; # put it on end machine
		print "preserving old motd on $hostname.....\n";
		system("/home/chicks/bin/ox-ssh -t 5 $hostname 'cp /etc/motd /etc/motd.preserve'");
	} elsif ($rows == 1) {
		my $row = $sth->fetchrow_hashref();
		my $oldmotd = $row->{motd};
		if ($motd eq $oldmotd) {
			# no changes
			#print "no changes for $hostname\n";
		} else {
			# update
			my $sql = "update motd set motd=" . $dbh->quote($motd) . " where hostname=" . $dbh->quote($hostname);
			$dbh->do($sql);
			$copy = 1; # put it on end machine
		}
	} else {
		die "impossible";
	}

	if ($copy) {
		my $alias = $hostname;
		$alias =~ s/\.(xa|xv|ew|ed)$//;

		my $tmpfile = "/tmp/motd.$hostname";
		write_file($tmpfile,$motd);
		system("/home/chicks/bin/ox-scp -o ConnectTimeout=5 $tmpfile $alias:/etc/motd");
		if ($?) {
			print "scp screwed up on $hostname\n";
		} else {
			my $sql = "update motd set last_updated=now() where hostname=" . $dbh->quote($hostname);
			$dbh->do($sql);
		}
		#die 'test';
	}
}

sub print_host {
	my ($host) = @_;
	my $hostname = $host->{hostname};
	my $alias = $host->{alias};
	my $ip = $host->{ip};
	my $parent = $host->{parent};
	my $purpose = $host->{purpose};
	my $ipmi_web = $host->{ipmi_web};
	my $roles = $host->{roles};
	my $comments = $host->{comments};

	my $entry;
	$entry .= "\n";
	$entry .= "\n";
	$entry .= "OpenX automotd\n";
	$entry .= "\n";
	$entry .= "hostname:\t$hostname ( aka $alias )\n";
	$entry .= "\n";
	$entry .= "purpose:\t$purpose\n\n" if defined $purpose;
	$entry .= "ip:\t$ip\n";
	$entry .= "phys:\t$parent\n" if defined $parent;
	$entry .= "ipmi:\t$ipmi_web\n" if defined $ipmi_web;
	$entry .= "\n";
	$entry .= "roles:\t" . join("\n\t",@$roles) . "\n";
	$entry .= "\n";
	$entry .= $comments;
	$entry .= "\n";
	return $entry;
}

sub print_comments {
	my ($entity) = @_; 
	my( %search, %opts );
	my $output = '';

	$opts{ order_by } = { '-asc'  => 'created_at' };
	$opts{ rows } = 10;

	my $comments =
		$entity->search(
			\%search,
			\%opts
		);

	while( my $comment = $comments->next ) {
		$output .= sprintf "%-25s   %-10.10s %-8.8s    %25s\n",
			$comment->user || '-',
			$comment->created_at->mdy('/'), $comment->created_at->hms,
			$comment->type;
		$output .= sprintf "%s\n\n", $comment->text;
	}
	
	return $output;
}

sub get_roles {
	my ($machine) = @_;
	my @roles = $machine->roles;
	my @rolenames;
	foreach my $role (@roles) {
		my $name = $role->name;
		push(@rolenames, $name);
	}
	return sort @rolenames;
}

sub getswitches {
	# this is a temporary hack - eventually this will be through DBIC
	my $dbh = DBI->connect('DBI:mysql:chicks','root','J04xl*4e!h') or die "couldn't connect: " . $DBI::errstr;

	my $sql = "select es.hostname as hostname,
				es.ip as ip,
				es.rack_id as rack_id,
				c.shortname as dc
			from ether_switches es, mcp2.racks r, mcp2.clusters c
			where es.rack_id=r.id and r.cluster_id=c.id;";
	my $sth = $dbh->prepare($sql) or die "bad prepare('$sql'): " . $DBI::errstr;
	$sth->execute() or die "bad execute: " . $DBI::errstr;

	my (%switches,%rack_switches,%dc_switches);
	while ( my $row = $sth->fetchrow_hashref() ) {
		my $hostname = $row->{hostname};
		my $ip = $row->{ip};
		my $rack_id = $row->{rack_id};
		my $dc = $row->{dc};
		my $alias = "$hostname.$dc";

		$rack_switches{$rack_id} = $hostname;
		push ( @{ $dc_switches{$dc} }, $hostname );
	} 
	return (\%switches,\%rack_switches,\%dc_switches);
}

sub get_vm_hosts {
	# wouldn't it be nice if this were in the MCP??
	my ($dc) = @_;

	my $one = OX::Net::ONE->new( $dc );

	my $vms = $one->vm_all_information->{ VirtualMachines };
	my (%vm_hosts,%host_vms);
	foreach my $vm (@$vms) {
		my $vmi = $one->vm_information( VirtualMachineId => $vm->get_id )->{ VirtualMachine };
		my $vm_name = $vmi->{name}->fetch;
		my $vm_host = $vmi->{physical_host}->fetch;
		$vm_hosts{$vm_name} = $vm_host;
		push(@{ $host_vms{$vm_host} }, $vm_name);
	}

	return (\%vm_hosts,\%host_vms);
}
