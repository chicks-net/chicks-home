#!/usr/bin/env bash

# TODO: strict mode

# Color variables
BLUE='\033[34m'
RED='\033[31m'
RESET='\033[0m'

function carp {
	echo "carp $1"
	exit 2
}

gitdir=~/Documents/git
cd "$gitdir" || carp "failed to chdir; $!"

#ls -ltr
#echo "code faster..."

# Array to store repos with modified files
declare -a modified_repos

for dir in $(find . -type d -mindepth 1 -maxdepth 1 -print | sort); do
	echo "dir=$dir"

	if [[ -d "$dir/.git" ]]; then
		#echo "  - looks like a git repo"

		branch=$(
			cd "$dir" || exit
			git branch --show-current
		)

		if [[ "$branch" == "master" ]]; then
			echo -e "  - on branch '$branch' ${BLUE}(deprecated default branch name)${RESET}"
		else
			echo "  - on branch '$branch'"
		fi

		untracked_files=$(
			cd "$dir" || exit
			git status --porcelain | wc -l | sed -e 's/^[ ]*//'
		)
		if [[ "$untracked_files" -gt 0 ]]; then
			echo -e "  - ${RED}$untracked_files untracked or modified files${RESET}"
			modified_repos+=("$untracked_files:$dir")
		fi
	else
		echo "  - not a git repo"
	fi
done

# Print summary of repos with modified files
if [[ ${#modified_repos[@]} -gt 0 ]]; then
	echo
	echo "Summary of repos with modified/untracked files/directories:"
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	printf '%s\n' "${modified_repos[@]}" | sort -nr | while IFS=':' read -r count repo; do
		echo -e "  ${RED}$count${RESET} files in $repo"
	done
fi
